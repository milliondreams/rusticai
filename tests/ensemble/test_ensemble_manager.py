# Generated by CodiumAI
import unittest
from mailbox import Message

from rustic_ai.ensemble.ensemble import MemberCommsType, MemberType
from rustic_ai.ensemble.ensemble_manager import EnsembleManager
from rustic_ai.ensemble.storage.exceptions import EnsembleNotFoundError


class TestEnsembleManager(unittest.TestCase):
    def setUp(self) -> None:
        self.manager = EnsembleManager('./tests/sample-configs/config1.yaml')

    # Tests that a new ensemble can be created with a valid name
    def test_create_ensemble_with_valid_name(self):
        ensemble_map = self.manager.create_ensemble('Test Ensemble')
        self.assertIsNotNone(ensemble_map)
        self.assertIsNotNone(ensemble_map.ensemble)
        self.assertIsNotNone(ensemble_map.message_bus)
        self.assertEqual(ensemble_map.ensemble.name, 'Test Ensemble')

    # Tests that an existing ensemble can be loaded from storage
    def test_load_ensemble(self):
        # Create a new ensemble
        ensemble_map = self.manager.create_ensemble('Test Ensemble')
        ensemble = ensemble_map.ensemble

        # Save the ensemble to storage
        self.manager.ensemble_storage.update_ensemble(ensemble)

        # Load the ensemble from storage
        loaded_ensemble_map = self.manager.load_ensemble(ensemble.id)
        loaded_ensemble = loaded_ensemble_map.ensemble

        # Assert that the loaded ensemble is the same as the original ensemble
        self.assertEqual(loaded_ensemble.id, ensemble.id)
        self.assertEqual(loaded_ensemble.name, ensemble.name)
        self.assertEqual(len(loaded_ensemble.members), len(ensemble.members))

    # Tests that a new ensemble member is created with valid parameters
    def test_create_ensemble_member_valid_params(self):
        # Create a new ensemble
        ensemble_map = self.manager.create_ensemble('Test Ensemble')

        # Define a callback function for the ensemble member
        def callback(message: Message):
            pass

        # Create a new ensemble member
        member_map = self.manager.create_ensemble_member(
            ensemble_id=ensemble_map.ensemble.id,
            member_name='Test Member',
            member_type=MemberType.BOT,
            member_comms=MemberCommsType.WEBHOOK,
            callback=callback,
            endpoint='https://example.com',
        )

        # Check that the member was created with the correct parameters
        self.assertEqual(member_map.member.name, 'Test Member')
        self.assertEqual(member_map.member.member_type, MemberType.BOT)
        self.assertEqual(member_map.member.comms_type, MemberCommsType.WEBHOOK)
        self.assertEqual(member_map.member.endpoint, 'https://example.com')
        self.assertTrue(member_map.member.is_active)

    # Tests that an existing ensemble member can be retrieved from the ensemble manager
    def test_get_ensemble_member(self):
        # Create a new ensemble
        ensemble_map = self.manager.create_ensemble('Test Ensemble')
        ensemble = ensemble_map.ensemble

        # Create a new ensemble member
        member_map = self.manager.create_ensemble_member(
            ensemble_id=ensemble.id,
            member_name='Test Member',
            member_type=MemberType.BOT,
            member_comms=MemberCommsType.WEBHOOK,
            callback=lambda message: None,
            endpoint='https://example.com',
        )
        member = member_map.member

        # Get the ensemble member
        retrieved_member_map = self.manager.get_ensemble_member(ensemble.id, member.id)
        retrieved_member = retrieved_member_map.member

        # Check that the retrieved member is the same as the original member
        self.assertEqual(retrieved_member.id, member.id)
        self.assertEqual(retrieved_member.name, member.name)
        self.assertEqual(retrieved_member.member_type, member.member_type)
        self.assertEqual(retrieved_member.comms_type, member.comms_type)
        self.assertEqual(retrieved_member.endpoint, member.endpoint)
        self.assertEqual(retrieved_member.is_active, member.is_active)

    # Tests that an ensemble member can be deactivated and unregistered from the message bus.
    def test_deactivate_ensemble_member(self):
        # Create a new ensemble
        ensemble_map = self.manager.create_ensemble('Test Ensemble')
        ensemble = ensemble_map.ensemble

        # Create a new ensemble member
        member_map = self.manager.create_ensemble_member(
            ensemble_id=ensemble.id,
            member_name='Test Member',
            member_type=MemberType.BOT,
            member_comms=MemberCommsType.WEBHOOK,
            callback=lambda message: None,
            endpoint='https://example.com',
        )
        member = member_map.member

        # Deactivate the member
        self.manager.deactivate_ensemble_member(ensemble.id, member.id)

        # Ensure the member is deactivated and unregistered from the message bus
        self.assertFalse(member.is_active)
        self.assertNotIn(member.id, ensemble_map.message_bus.clients)

    # Tests that an error is raised when trying to create a new ensemble with an empty name
    def test_empty_name(self):
        with self.assertRaises(ValueError):
            self.manager.create_ensemble('')

    # Tests that an error is raised when trying to get a non-existent ensemble
    def test_nonexistent_ensemble(self):
        with self.assertRaises(EnsembleNotFoundError):
            self.manager.get_ensemble('nonexistent_ensemble_id')

    # Tests that attempting to get a member from non-existent ensemble raises a error.
    def test_nonexistent_ensemble_member(self):
        with self.assertRaises(EnsembleNotFoundError):
            self.manager.get_ensemble_member('nonexistent_ensemble_id', 'nonexistent_member_id')
